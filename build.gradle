buildscript {
	repositories {
		mavenLocal()
		maven { url "https://repo.grails.org/grails/core" }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
		classpath "org.grails.plugins:hibernate5:${ gormVersion - ".RELEASE" }"
		classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.15.1"
	}
}

plugins {
	id 'com.bmuschko.docker-remote-api' version '4.4.1'
}

version "0.1"
group "omar.docker"


apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-web"
apply plugin: "asset-pipeline"
apply plugin: "org.grails.grails-gsp"

repositories {
	mavenLocal()
	maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-logging"
	compile "org.springframework.boot:spring-boot-autoconfigure"
	compile "org.grails:grails-core"
	compile "org.springframework.boot:spring-boot-starter-actuator"
	compile "org.springframework.boot:spring-boot-starter-tomcat"
	compile "org.grails:grails-web-boot"
	compile "org.grails:grails-logging"
	compile "org.grails:grails-plugin-rest"
	compile "org.grails:grails-plugin-databinding"
	compile "org.grails:grails-plugin-i18n"
	compile "org.grails:grails-plugin-services"
	compile "org.grails:grails-plugin-url-mappings"
	compile "org.grails:grails-plugin-interceptors"
	compile "org.grails.plugins:cache"
	compile "org.grails.plugins:async"
	compile "org.grails.plugins:scaffolding"
	compile "org.grails.plugins:events"
	compile "org.grails.plugins:hibernate5"
	compile "org.hibernate:hibernate-core:5.1.16.Final"
	compile "org.grails.plugins:gsp"
	console "org.grails:grails-console"
	profile "org.grails.profiles:web"
	runtime "org.glassfish.web:el-impl:2.1.2-b03"
	runtime "com.h2database:h2"
	runtime "org.apache.tomcat:tomcat-jdbc"
	runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.15.1"
	testCompile "org.grails:grails-gorm-testing-support"
	testCompile "org.grails.plugins:geb"
	testCompile "org.grails:grails-web-testing-support"
	testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
	testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
}

bootRun {
	jvmArgs( '-Dspring.output.ansi.enabled=always' )
	addResources = true
	String springProfilesActive = 'spring.profiles.active'
	systemProperty springProfilesActive, System.getProperty( springProfilesActive )
}


assets {
	minifyJs = true
	minifyCss = true
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

ext {
	dockerRegistry = project.dockerRegistry
	dockerRepo = project.dockerRepo
	dockerTag = "${ project.name }:${ project.version }".toLowerCase()
	dockerBuildDir = mkdir( "${ buildDir }/docker" )
}

task prepareDocker( type: Copy, dependsOn: assemble ) {
	description = 'Copy files from src/main/docker and application jar to Docker temporal build directory'
	group = 'Docker'

	from 'src/main/docker'
	from project.jar

	into dockerBuildDir
}

task createDockerfile( type: Dockerfile, dependsOn: prepareDocker ) {
	description = 'Create a Dockerfile file'
	group = 'Docker'

	destFile = project.file( "${ dockerBuildDir }/Dockerfile" )

	from 'openjdk:8-jdk-alpine'

	label( [
			maintainer: 'John Doe "john.doe@example.com"'
	] )

	exposePort 8080

	workingDir '/app'

	copyFile jar.archiveName, 'application.jar'
	copyFile 'app-entrypoint.sh', 'app-entrypoint.sh'
	runCommand 'chmod +x app-entrypoint.sh'

//	entryPoint '/app/app-entrypoint.sh'
	defaultCommand '/app/app-entrypoint.sh'
}

task buildImage( type: DockerBuildImage, dependsOn: createDockerfile ) {
	description = 'Create Docker image to run the Grails application'
	group = 'Docker'

	inputDir = file( dockerBuildDir )

	tags = ["${project.dockerTag}".toString()]
}

task tagImage(type: DockerTagImage, dependsOn: buildImage) {
	group = 'Docker'
	description = "Tag custom docker image."

	targetImageId buildImage.getImageId()
	repository = "${project.dockerRegistry}/${project.dockerRepo}".toString()
	tag = project.dockerTag
}

task pushImage(type: DockerPushImage, dependsOn: tagImage) {
	group = 'Docker'
	description = "Push custom docker image."
	
	tag = project.dockerTag
	imageName = "${ project.dockerRegistry }/${ project.dockerRepo }".toString()
}